endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are an experienced tech lead in a software development agency and your main task is to break down the project
    into smaller tasks that developers will do. You must specify each task as clear as possible. Each task must have a description
    of what needs to be implemented, a programmatic goal that will determine if a task can be marked as done from a programmatic
    perspective and user-review goal that will determine if a task is done or not but from a user perspective since it will
    be reviewed by a human.
- role: user
  content: 'You are working in a software development agency and a project manager and software architect approach you telling
    you that you''re assigned to work on a new project. You are working on a App called "starfires_v2" and you need to create
    a detailed development plan so that developers can start developing the app.


    Here is a high level description of "starfires_v2":

    ```

    The project, "starfires_v2," is an Astrology website offering live event participation with video streaming, a digital
    storefront for astrology books, an informative single-admin blog, and mastery courses featuring user progress tracking
    and assessments. The development stack includes React, Node.js, Express, Python for astrological computations, Socket.IO
    for real-time communication, MongoDB, and authentication with OAuth or JWT. The site will provide features like natal
    chart calculations, transit forecasts, synastry and compatibility reports, progression charts, electional astrology, horary
    astrology, and event matching based on astrological data. The process encompasses UI/UX design, functionality and user
    experience testing, deployment to a cloud hosting service, and ongoing maintenance for content updates and security.

    ```



    Here are the technologies that you need to use for this project:

    ```


    - React


    - Node.js


    - Express


    - Python


    - Swagger


    - Socket.IO


    - MongoDB


    - Mongoose


    - OAuth


    - JWT


    - Bootstrap


    - HTML


    - CSS3


    - D3.js


    - axios


    - cronjob


    ```




    Before we go into the coding part, I want you to split the development process of creating this app into smaller tasks
    so that it is easier to develop, debug and make the app work. Each smaller task of this app has to be a whole that can
    be reviewed by a developer to make sure we''re on a right track to create this app completely.


    Each task needs to be related only to the development of this app and nothing else - once the app is fully working, that
    is it. There shouldn''t be a task for researching, deployment, writing documentation, or anything that is not writing
    the actual code.


    Now, based on the project details provided, think task by task and create the entire development plan. Start from the
    project setup and specify each task until the moment when the entire app should be fully working.


    **IMPORTANT**

    Dividing project into tasks is extremely important job and has to be done carefully while always strictly following all
    rules listed bellow.


    Rule #1

    There should never be a task that is only testing or ensuring something works, every task must have coding involved. Have
    this in mind for every task, but it is extremely important for last task of project. Testing if app works will be done
    as part of each task.


    Rule #2

    You have to make sure the project is not split into tasks that are too small or simple for no reason but also not too
    big or complex so that they are hard to develop, debug and review. Here are examples of poorly created tasks:


    **too simple tasks**

    - Set up a Node.js project and install all necessary dependencies.

    - Establish a MongoDB database connection using Mongoose with the IP ''127.0.0.1''.


    **too complex tasks**

    - Set up Node.js project with /home, /profile, /register and /login routes that will have user authentication, connection
    to MongoDB with user schemas, mailing of new users and frontend with nice design.


    You must to avoid creating tasks that are too simple or too complex. You have to aim to create tasks that are medium complexity.
    Here are examples of tasks that are good:


    **good tasks**

    - Set up a Node.js project, install all necessary dependencies and set up an express server with a simple route to `/ping`
    that returns the status 200.

    - Establish a MongoDB database connection and implement the message schema using Mongoose for persistent storage of messages.


    Rule #3

    Every app should have different number of tasks depending on complexity. Think task by task and create the minimum number
    of tasks that are relevant for this specific app. Here are some examples of apps with different complexity that can give
    you guidance on how many tasks you should create:


    Example #1:

    app description: "I want to create an app that will just say ''Hello World'' when I open it on my localhost:3000."

    number of tasks: 1-3


    Example #2:

    app description: "Create a node.js app that enables users to register and log into the app. On frontend it should have
    /home (shows user data), /register and /login. It should use sessions to keep user logged in."

    number of tasks: 2-6


    Example #3:

    app description: "A cool online shoe store, with a sleek look. In terms of data models, there are shoes, categories and
    user profiles. For web pages: product listing, details, shopping cart. It must look cool and jazzy."

    number of tasks: 5-15'
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"plan\": {\n        \"type\": \"array\",\n        \"description\"\
    : \"List of development tasks that need to be done to implement the entire plan.\",\n        \"items\": {\n          \
    \  \"type\": \"object\",\n            \"description\": \"Development task that needs to be done to implement the entire\
    \ plan.\",\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\"\
    ,\n                    \"description\": \"Description of the development task that needs to be done to implement the entire\
    \ plan.\"\n                },\n                \"programmatic_goal\": {\n                    \"type\": \"string\",\n \
    \                   \"description\": \"Detailed description of programmatic goal. Programmatic goal that will determine\
    \ if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before\
    \ the task is sent to you for a review). All details previously specified by user that are important for this task must\
    \ be included in this programmatic goal.\"\n                },\n                \"user_review_goal\": {\n            \
    \        \"type\": \"string\",\n                    \"description\": \"User review goal that will determine if a task\
    \ is done or not, but from a user perspective since it will be reviewed by a human.\"\n                }\n           \
    \ },\n            \"required\": [\n                \"description\",\n                \"programmatic_goal\",\n        \
    \        \"user_review_goal\"\n            ]\n        }\n    }\n}\n```\n\n"
response: "```json\n{\n  \"plan\": [\n    {\n      \"description\": \"Initialize the Node.js backend, setup Express server\
  \ with basic routing, and install core dependencies.\",\n      \"programmatic_goal\": \"Confirmation that server runs without\
  \ errors on localhost and responds to a GET request at '/api/ping' endpoint with a status code 200 and a JSON { 'message':\
  \ 'pong' }.\",\n      \"user_review_goal\": \"Reviewer can send a GET request to '/api/ping' endpoint and receive the expected\
  \ JSON response.\"\n    },\n    {\n      \"description\": \"Configure MongoDB database connection using Mongoose and create\
  \ a User schema to handle user data.\",\n      \"programmatic_goal\": \"Database connection established without errors,\
  \ User schema includes fields for username, email, password, and timestamps. Mongoose can create and retrieve User documents.\"\
  ,\n      \"user_review_goal\": \"Developer can demonstrate the ability to perform CRUD operations on User documents in the\
  \ MongoDB database through Mongoose.\"\n    },\n    {\n      \"description\": \"Implement authentication system using OAuth\
  \ and JWT with routes for registration, login, and user session management.\",\n      \"programmatic_goal\": \"Existence\
  \ of endpoints for /auth/register and /auth/login that handle user authentication, issuing JWT upon successful login, and\
  \ maintenance of user session.\",\n      \"user_review_goal\": \"User can register an account and, upon registration, can\
  \ log in and receive a token that grants access to authenticated routes.\"\n    },\n    {\n      \"description\": \"Build\
  \ the React frontend setup along with the initial UI components using Bootstrap, HTML, and CSS3.\",\n      \"programmatic_goal\"\
  : \"React project created with components for navigation bar, footer, and a home page with styling applied using Bootstrap.\"\
  ,\n      \"user_review_goal\": \"Reviewer can see a visually appealing home page with a navigation bar and footer upon running\
  \ the React app.\"\n    },\n    {\n      \"description\": \"Integrate Socket.IO for real-time communication and setup mechanisms\
  \ to handle live video streaming on the platform.\",\n      \"programmatic_goal\": \"Socket.IO configured on both server\
  \ and client-side, and a simple video streaming connection established between two users.\",\n      \"user_review_goal\"\
  : \"Two users can open the site and witness real-time video streaming from one end to the other.\"\n    },\n    {\n    \
  \  \"description\": \"Design and implement the digital storefront including the schema for store products and the shopping\
  \ cart functionality.\",\n      \"programmatic_goal\": \"Product schema with fields for name, description, price, and category\
  \ is created. Basic CRUD operations on products and adding/removing items from a user's cart are implemented.\",\n     \
  \ \"user_review_goal\": \"Reviewer can add products to the cart, view them in the cart, and modify quantities.\"\n    },\n\
  \    {\n      \"description\": \"Create the blog infrastructure with single-admin CRUD operations and draft blogging interface.\"\
  ,\n      \"programmatic_goal\": \"Blog schema is created to handle blog posts with endpoints for creating, reading, updating,\
  \ and deleting posts by an authenticated admin.\",\n      \"user_review_goal\": \"The administrator can log in, create a\
  \ new blog post, edit it, delete it, and list all posts with expected changes reflected.\"\n    },\n    {\n      \"description\"\
  : \"Develop mastery courses area with user progress tracking, assessments and Python backend computation for astrology charts.\"\
  ,\n      \"programmatic_goal\": \"Endpoints for course content delivery, user progress tracking, and assessments exist.\
  \ Astrological calculations can be performed using Python scripts.\",\n      \"user_review_goal\": \"A user can enroll in\
  \ a course, proceed through the content, take an assessment, and view their progress.\"\n    },\n    {\n      \"description\"\
  : \"Implement natal chart calculations, transit forecasts, compatibility reports, and other astrological services.\",\n\
  \      \"programmatic_goal\": \"Backend Python services correctly calculate natal charts, transits, and compatibility, and\
  \ data gets delivered through RESTful endpoints.\",\n      \"user_review_goal\": \"Reviewer can enter relevant data and\
  \ receive detailed astrological reports personalized to the input.\"\n    },\n    {\n      \"description\": \"Setup D3.js\
  \ integration for data visualization and implement dynamic charts representing astrological data.\",\n      \"programmatic_goal\"\
  : \"D3.js is configured in the React project, and visual components are created to depict astrological data obtained from\
  \ the back end.\",\n      \"user_review_goal\": \"User can see their astrological data represented as interactive and visually\
  \ pleasing D3.js charts on the frontend.\"\n    },\n    {\n      \"description\": \"Refine UI/UX and ensure responsive design,\
  \ cross-browser compatibility, and implement graceful error handling.\",\n      \"programmatic_goal\": \"All UI components\
  \ are tested for responsiveness across different screen sizes. Cross-browser tests pass, and all main user flows handle\
  \ errors gracefully with user feedback.\",\n      \"user_review_goal\": \"Reviewer experiences a smooth, user-friendly interface\
  \ without crashes, and consistent design across major browsers and devices.\"\n    },\n    {\n      \"description\": \"\
  Create a cron job for routine database backup and maintenance.\",\n      \"programmatic_goal\": \"Cron job implemented in\
  \ Node.js using the cron library to schedule and perform regular database backups.\",\n      \"user_review_goal\": \"Developer\
  \ can demonstrate the cron job triggering at scheduled times and databases backups are created and stored correctly.\"\n\
  \    },\n    {\n      \"description\": \"Conduct final integration testing to ensure all components of the website operate\
  \ cohesively.\",\n      \"programmatic_goal\": \"Automated integration tests cover the main user flows through the system,\
  \ checking that frontend calls correctly interact with the backend and produce desired outcomes.\",\n      \"user_review_goal\"\
  : \"Reviewer can follow documented user journeys and confirm the entire system functions as one cohesive application.\"\n\
  \    }\n  ]\n}\n```"
