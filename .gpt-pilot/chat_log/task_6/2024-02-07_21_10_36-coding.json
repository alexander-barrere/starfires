{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "command": "npm install cors",
          "timeout": 60000
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "server.js",
          "path": "/server.js",
          "content": "const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst connectDB = require('./config/db');\nconst User = require('./models/User');\nconst passport = require('passport');\nconst cors = require('cors'); // Added CORS\n\n// Connect Database\nconnectDB();\n\nconst app = express();\napp.use(cors({ origin: '*' })); // Enable CORS for all routes\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n    cors: {\n        origin: '*',\n        methods: ['GET', 'POST']\n    }\n});\n\n// Middleware\napp.use(express.json());\nrequire('./config/auth')(passport);\napp.use(passport.initialize());\nconst authRoutes = require('./routes/auth');\napp.use('/api/users', authRoutes);\n\n// Include setup function for socket event listeners\nrequire('./sockets')(io);\nconst productRoutes = require('./routes/productRoutes');\napp.use('/api/products', productRoutes);\n\nconst PORT = process.env.PORT || 3001;\n\napp.get('/api/ping', (req, res) => {\n    res.json({ message: 'pong' });\n});\n\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "productController.js",
          "path": "/controllers/productController.js",
          "content": "const Product = require('../models/Product');\n\nexports.getProducts = async (req, res) => {\n  try {\n    const products = await Product.find({});\n    res.json(products);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Server Error');\n  }\n};\n\nexports.getProductById = async (req, res) => {\n  // [OLD CODE] Product by ID retrieval logic\n};\n\nexports.createProduct = async (req, res) => {\n  // [OLD CODE] Product creation logic\n};\n\nexports.updateProduct = async (req, res) => {\n  // [OLD CODE] Product update logic\n};\n\nexports.deleteProduct = async (req, res) => {\n  // [OLD CODE] Product deletion logic\n};\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "productRoutes.js",
          "path": "/routes/productRoutes.js",
          "content": "const express = require('express');\nconst { check } = require('express-validator');\nconst productController = require('../controllers/productController');\nconst router = express.Router();\n\nrouter.get('/', productController.getProducts);\nrouter.get('/:id', productController.getProductById);\nrouter.post('/', [\n  check('title', 'Title is required').not().isEmpty(),\n  check('price', 'Price must be a valid number').isFloat({ gt: 0 })\n], productController.createProduct);\nrouter.put('/:id', [\n  check('title', 'Title is required').not().isEmpty(),\n  check('price', 'Price must be a valid number').isFloat({ gt: 0 })\n], productController.updateProduct);\nrouter.delete('/:id', productController.deleteProduct);\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "Treasures.js",
          "path": "/starfires_v2_frontend/src/pages/Treasures.js",
          "content": "import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nconst Treasures = () => {\n    const [products, setProducts] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // Fetch products from the backend\n        const fetchProducts = async () => {\n            try {\n                const response = await axios.get('http://localhost:3001/api/products');\n                setProducts(response.data);\n            } catch (error) {\n                console.error('Error fetching products:', error);\n            }\n        };\n        fetchProducts();\n    }, []);\n\n    const handleAddToCart = (productId) => {\n        // Invoke addToCart logic here\n        navigate('/cart');\n    };\n\n    return (\n        <Container>\n            // [OLD CODE] Previous implementation of the Treasures component\n        </Container>\n    );\n};\n\nexport default Treasures;\n"
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "Check the MongoDB database for entries in the `products` collection. Ensure there are products inserted that can be retrieved through the API. If the database is empty, add product entries manually or through an admin interface if available."
      }
    ]
  }
}