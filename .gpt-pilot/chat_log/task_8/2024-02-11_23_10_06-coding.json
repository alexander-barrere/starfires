{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "get_fully_coded_file",
      "description": "Gets the fully coded file.",
      "parameters": {
        "type": "object",
        "properties": {
          "file_content": {
            "type": "string",
            "description": "Fully coded file. This contains only the lines of code and no other text."
          }
        },
        "required": [
          "file_content"
        ]
      }
    }
  ],
  "response": {
    "file_content": "const bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { validationResult } = require('express-validator');\nconst User = require('../models/User');\n\nexports.register = async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  const { username, email, password, birthDate, birthTime, birthLatitude, birthLongitude } = req.body;\n  try {\n    let user = await User.findOne({ email });\n    if (user) {\n      return res.status(400).json({ errors: [{ msg: 'User already exists' }] });\n    }\n\n    const birthDateObject = birthDate ? new Date(birthDate) : null;\n\n    user = new User({\n      username,\n      email,\n      password,\n      birthDate: birthDateObject,\n      birthTime,\n      birthLatitude: parseFloat(birthLatitude),\n      birthLongitude: parseFloat(birthLongitude)\n    });\n\n    user.isSubscriber = false;\n    user.role = 'user';\n\n    const salt = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(password, salt);\n\n    await user.save();\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n\n    jwt.sign(\n      payload,\n      process.env.JWT_SECRET,\n      { expiresIn: 3600 },\n      (err, token) => {\n        if(err) throw err;\n        res.json({ token });\n      }\n    );\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.adminLogin = async (req, res) => {\n  const { email, password } = req.body;\n\n  try {\n    let user = await User.findOne({ email });\n    if (!user || user.role !== 'admin') {\n      return res.status(401).json({ errors: [{ msg: 'Unauthorized' }] });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({ errors: [{ msg: 'Unauthorized' }] });\n    }\n\n    if (user.role === 'admin') {\n      const payload = {\n        user: {\n          id: user.id\n        }\n      };\n\n      jwt.sign(\n        payload,\n        process.env.JWT_SECRET,\n        { expiresIn: '1h' },\n        (err, token) => {\n          if (err) throw err;\n          res.json({ token });\n        }\n      );\n    }\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\n"
  }
}