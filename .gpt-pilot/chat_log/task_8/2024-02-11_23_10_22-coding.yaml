endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are a full stack software developer who works in a software development agency. You write very modular and
    clean code. Your job is to implement tasks that your tech lead assigns you. Each task has a description of what needs
    to be implemented, a programmatic goal that will determine if a task can be marked as done and user-review goal that will
    determine if a task is done or not but from a user perspective since it will be reviewed by a human.
- role: user
  content: "Here is how the file `controllers/userProfileController.js` looks like right now:\n```\nconst User = require('../models/User');\n\
    \nexports.updateProfile = async (req, res) => {\n  try {\n    const {\n      birthDate,\n      birthTime,\n      birthLatitude,\n\
    \      birthLongitude\n    } = req.body;\n    const user = await User.findById(req.user.id); \n    \n    if (!user) {\n\
    \      return res.status(404).json({ msg: 'User not found' });\n    }\n\n    user.birthDate = birthDate;\n    user.birthTime\
    \ = birthTime;\n    user.birthLatitude = birthLatitude;\n    user.birthLongitude = birthLongitude;\n    \n    await user.save();\n\
    \    res.json(user);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server Error');\n  }\n};\n\
    \nexports.getAstrologyChart = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n \
    \   if (!user) {\n      return res.status(404).json({ msg: 'User not found' });\n    }\n\n    const svgChart = \"\"; //\
    \ TODO: Implement actual logic to generate SVG chart based on user's profile\n\n    res.set('Content-Type', 'image/svg+xml');\n\
    \    res.send(svgChart);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server Error');\n  }\n\
    };\n\n```\n\nAnd here is the new implementation for the same file:\n```\nconst User = require('../models/User');\n\nexports.updateProfile\
    \ = async (req, res) => {\n  try {\n    const { birthDate, birthTime, birthLatitude, birthLongitude } = req.body;\n  \
    \  const user = await User.findById(req.user.id);\n    \n    if (!user) {\n      return res.status(404).json({ msg: 'User\
    \ not found' });\n    }\n\n    user.birthDate = birthDate;\n    user.birthTime = birthTime;\n    user.birthLatitude =\
    \ birthLatitude;\n    user.birthLongitude = birthLongitude;\n    // Add additional fields to update\n    user.isSubscriber\
    \ = req.body.isSubscriber !== undefined ? req.body.isSubscriber : user.isSubscriber;\n    user.role = req.body.role ||\
    \ user.role;\n    \n    await user.save();\n    res.json(user);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server\
    \ Error');\n  }\n};\n\nexports.getAstrologyChart = async (req, res) => {\n  // [OLD CODE] Get user's birth chart logic\n\
    };\n\n```\n\nNow, implement the new changes into the previously implemented file and return the entirely coded file. Do\
    \ not add any lines of code that are not in the previously coded file or the new implementation but only combine those\
    \ two.\n\n**IMPORTANT**\nAll lines of code in the new implementation should be present. From the old implementation, only\
    \ take the ones that are replaced with the comment `[OLD CODE]` in the new implementation\n\n**IMPORTANT**\nMake sure\
    \ that you respond with all lines of code that are replaced by these comments, including all control structures, error\
    \ handling, and any other relevant logic that was in the original code.\nUnder no circumstances should you ever leave\
    \ any part of the code snippet unwritten. Every single line of code that exists in the place where the comment lives right\
    \ now should be replaced. Do not include any code that is above or below the comment but only the code that should be\
    \ in the position of the comment."
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"file_content\": {\n        \"type\": \"string\",\n     \
    \   \"description\": \"Fully coded file. This contains only the lines of code and no other text.\"\n    }\n}\n```\n\n"
response: "```json\n{\n    \"file_content\": \"const User = require('../models/User');\\n\\nexports.updateProfile = async\
  \ (req, res) => {\\n  try {\\n    const { birthDate, birthTime, birthLatitude, birthLongitude } = req.body;\\n    const\
  \ user = await User.findById(req.user.id);\\n    \\n    if (!user) {\\n      return res.status(404).json({ msg: 'User not\
  \ found' });\\n    }\\n\\n    user.birthDate = birthDate;\\n    user.birthTime = birthTime;\\n    user.birthLatitude = birthLatitude;\\\
  n    user.birthLongitude = birthLongitude;\\n    // Add additional fields to update\\n    user.isSubscriber = req.body.isSubscriber\
  \ !== undefined ? req.body.isSubscriber : user.isSubscriber;\\n    user.role = req.body.role || user.role;\\n    \\n   \
  \ await user.save();\\n    res.json(user);\\n  } catch (err) {\\n    console.error(err);\\n    res.status(500).send('Server\
  \ Error');\\n  }\\n};\\n\\nexports.getAstrologyChart = async (req, res) => {\\n  try {\\n    const user = await User.findById(req.user.id);\\\
  n\\n    if (!user) {\\n      return res.status(404).json({ msg: 'User not found' });\\n    }\\n\\n    const svgChart = \\\
  \"\\\"; // TODO: Implement actual logic to generate SVG chart based on user's profile\\n\\n    res.set('Content-Type', 'image/svg+xml');\\\
  n    res.send(svgChart);\\n  } catch (err) {\\n    console.error(err);\\n    res.status(500).send('Server Error');\\n  }\\\
  n};\\n\"\n}\n```"
