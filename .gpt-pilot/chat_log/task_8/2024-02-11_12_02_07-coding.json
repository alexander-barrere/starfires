{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "userProfileController.js",
          "path": "/controllers/userProfileController.js",
          "content": "const User = require('../models/User');\n\nexports.updateProfile = async (req, res) => {\n  // ... Existing updateProfile logic\n};\n\nexports.getAstrologyChart = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    if (!user) {\n      return res.status(404).json({ msg: 'User not found' });\n    }\n\n    // [OLD CODE] Insert existing code for generating an astrology chart based on the user's profile\n    // INPUT_REQUIRED {Provide the actual logic for generating an SVG chart based on the user's profile}\n\n    res.set('Content-Type', 'image/svg+xml');\n    res.send(svgChart);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server Error');\n  }\n};\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "userRoutes.js",
          "path": "/routes/userRoutes.js",
          "content": "const express = require('express');\nconst router = express.Router();\nconst userProfileController = require('../controllers/userProfileController');\nconst passport = require('passport');\n\n// ... Other route declarations\n\nrouter.get('/profile/astrology-chart', passport.authenticate('jwt', { session: false }), userProfileController.getAstrologyChart);\n\n// ... Other route declarations\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "Product.js",
          "path": "/models/Product.js",
          "content": "const mongoose = require('mongoose');\n\nconst ProductSchema = new mongoose.Schema({\n  // ... Other fields\n  owner: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  }\n  // ... Other fields\n});\n\nmodule.exports = mongoose.model('Product', ProductSchema);\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "Course.js",
          "path": "/models/Course.js",
          "content": "const mongoose = require('mongoose');\n\nconst CourseSchema = new mongoose.Schema({\n  // ... Other fields\n  owner: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  }\n  // ... Other fields\n});\n\nmodule.exports = mongoose.model('Course', CourseSchema);\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "purchaseController.js",
          "path": "/controllers/purchaseController.js",
          "content": "const User = require('../models/User');\nconst Product = require('../models/Product');\nconst Course = require('../models/Course');\n// Assuming there are models for order and transactions etc.\n\nexports.handleProductPurchase = async (req, res) => {\n  try {\n    const { userId, productId } = req.body;\n    // [OLD CODE] Implement logic to create an order and associate product with user\n    res.status(200).json({ message: 'Purchase successful.' });\n  } catch (error) {\n    res.status(400).json({ message: 'Purchase failed', error: error.message });\n  }\n};\n// Add methods for handling course purchases and subscriptions\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "purchaseRoutes.js",
          "path": "/routes/purchaseRoutes.js",
          "content": "const express = require('express');\nconst router = express.Router();\nconst purchaseController = require('../controllers/purchaseController');\nconst passport = require('passport');\n\nrouter.post('/buy-product', passport.authenticate('jwt', { session: false }), purchaseController.handleProductPurchase);\n// Add more routes for other purchase types...\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "Ensure that the `.gitignore` file includes entries for any new config files that might store sensitive details, such as `payment-keys.json` or similar files. Review the file and update accordingly."
      },
      {
        "type": "code_change",
        "code_change": {
          "name": ".gitignore",
          "path": "/.gitignore",
          "content": "# Existing .gitignore entries\n\n# Payment keys and other sensitive config files\npayment-keys.json\n\n# More entries..."
        }
      }
    ]
  }
}