{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "save_files",
      "description": "Iterates over the files passed to this function and saves them on the disk.",
      "parameters": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "description": "List of files that need to be saved.",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the file that needs to be saved on the disk."
                },
                "path": {
                  "type": "string",
                  "description": "Full path of the file with the file name that needs to be saved."
                },
                "content": {
                  "type": "string",
                  "description": "Full content of the file that needs to be saved on the disk. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the file that needs to be saved on the disk. This description doesn't need to explain what is being done currently in this task but rather what is the idea behind this file - what do we want to put in this file in the future. Write the description ONLY if this is the first time this file is being saved. If this file already exists on the disk, leave this field empty."
                }
              },
              "required": [
                "name",
                "path",
                "content"
              ]
            }
          }
        },
        "required": [
          "files"
        ]
      }
    }
  ],
  "response": {
    "files": [
      {
        "name": "courseController.js",
        "path": "/controllers/courseController.js",
        "content": "// All the imports required for the controller\nconst Course = require('../models/Course');\nconst UserProgress = require('../models/UserProgress');\nconst Assessment = require('../models/Assessment');\n\n// Function to retrieve all courses\nexports.getCourses = async (req, res) => {\n  try {\n    const courses = await Course.find();\n    res.json(courses);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n};\n\n// Function to get user progress for a specific course\nexports.getUserProgress = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    const courseId = req.params.courseId;\n    const progress = await UserProgress.findOne({ user: userId, course: courseId });\n    if (!progress) {\n      return res.status(404).json({ msg: 'Progress not found' });\n    }\n    res.json(progress);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n};\n\n// Function to get assessment for a specific course\nexports.getAssessmentForCourse = async (req, res) => {\n  try {\n    const courseId = req.params.courseId;\n    const assessment = await Assessment.findOne({ course: courseId });\n    if (!assessment) {\n      return res.status(404).json({ msg: 'Assessment not found' });\n    }\n    res.json(assessment);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n};\n"
      },
      {
        "name": "courseRoutes.js",
        "path": "/routes/courseRoutes.js",
        "content": "// All the imports required for the routers\nconst express = require('express');\nconst courseController = require('../controllers/courseController');\nconst { check } = require('express-validator');\n\nconst router = express.Router();\n\n// Define the course routes here\nrouter.get('/', courseController.getCourses);\nrouter.get('/progress/:userId/:courseId', courseController.getUserProgress);\nrouter.post('/progress/update', [\n  check('userId', 'userId is required').not().isEmpty(),\n  check('courseId', 'courseId is required').not().isEmpty(),\n], courseController.updateUserProgress);\nrouter.get('/assessments/:courseId', courseController.getAssessmentForCourse);\n\nmodule.exports = router;\n"
      }
    ]
  }
}