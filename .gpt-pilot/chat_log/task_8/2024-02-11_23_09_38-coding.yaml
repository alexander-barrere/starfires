endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are a full stack software developer who works in a software development agency. You write very modular and
    clean code. Your job is to implement tasks that your tech lead assigns you. Each task has a description of what needs
    to be implemented, a programmatic goal that will determine if a task can be marked as done and user-review goal that will
    determine if a task is done or not but from a user perspective since it will be reviewed by a human.
- role: user
  content: "Here is how the file `models/User.js` looks like right now:\n```\nconst mongoose = require('mongoose');\n\nconst\
    \ UserSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n\
    \  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required:\
    \ true\n  },\n  birthDate: {\n    type: Date,\n    required: false\n  },\n  birthTime: {\n    type: String,\n    required:\
    \ false\n  },\n  birthLatitude: {\n    type: Number,\n    required: false\n  },\n  birthLongitude: {\n    type: Number,\n\
    \    required: false\n  },\n  created_at: {\n    type: Date,\n    default: Date.now\n  },\n  last_login: {\n    type:\
    \ Date\n  }\n});\n\nmodule.exports = mongoose.model('User', UserSchema);\n\n```\n\nAnd here is the new implementation\
    \ for the same file:\n```\nconst mongoose = require('mongoose');\n\nconst UserSchema = new mongoose.Schema({\n  username:\
    \ {\n    type: String,\n    required: true,\n    unique: true\n  },\n  email: {\n    type: String,\n    required: true,\n\
    \    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  birthDate: {\n    type: Date,\n\
    \    required: false\n  },\n  birthTime: {\n    type: String,\n    required: false\n  },\n  birthLatitude: {\n    type:\
    \ Number,\n    required: false\n  },\n  birthLongitude: {\n    type: Number,\n    required: false\n  },\n  created_at:\
    \ {\n    type: Date,\n    default: Date.now\n  },\n  last_login: {\n    type: Date\n  },\n  // Additional fields based\
    \ on new requirement\n  isSubscriber: {\n    type: Boolean,\n    default: false\n  },\n  role: {\n    type: String,\n\
    \    enum: ['user', 'admin', 'subscriber'],\n    default: 'user'\n  }\n  // [OLD CODE] Add any other pre-existing fields\
    \ or schema customizations\n});\n\nmodule.exports = mongoose.model('User', UserSchema);\n\n```\n\nNow, implement the new\
    \ changes into the previously implemented file and return the entirely coded file. Do not add any lines of code that are\
    \ not in the previously coded file or the new implementation but only combine those two.\n\n**IMPORTANT**\nAll lines of\
    \ code in the new implementation should be present. From the old implementation, only take the ones that are replaced\
    \ with the comment `[OLD CODE]` in the new implementation\n\n**IMPORTANT**\nMake sure that you respond with all lines\
    \ of code that are replaced by these comments, including all control structures, error handling, and any other relevant\
    \ logic that was in the original code.\nUnder no circumstances should you ever leave any part of the code snippet unwritten.\
    \ Every single line of code that exists in the place where the comment lives right now should be replaced. Do not include\
    \ any code that is above or below the comment but only the code that should be in the position of the comment."
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"file_content\": {\n        \"type\": \"string\",\n     \
    \   \"description\": \"Fully coded file. This contains only the lines of code and no other text.\"\n    }\n}\n```\n\n"
response: "```json\n{\n    \"file_content\": \"const mongoose = require('mongoose');\\n\\nconst UserSchema = new mongoose.Schema({\\\
  n  username: {\\n    type: String,\\n    required: true,\\n    unique: true\\n  },\\n  email: {\\n    type: String,\\n \
  \   required: true,\\n    unique: true\\n  },\\n  password: {\\n    type: String,\\n    required: true\\n  },\\n  birthDate:\
  \ {\\n    type: Date,\\n    required: false\\n  },\\n  birthTime: {\\n    type: String,\\n    required: false\\n  },\\n\
  \  birthLatitude: {\\n    type: Number,\\n    required: false\\n  },\\n  birthLongitude: {\\n    type: Number,\\n    required:\
  \ false\\n  },\\n  created_at: {\\n    type: Date,\\n    default: Date.now\\n  },\\n  last_login: {\\n    type: Date\\n\
  \  },\\n  // Additional fields based on new requirement\\n  isSubscriber: {\\n    type: Boolean,\\n    default: false\\\
  n  },\\n  role: {\\n    type: String,\\n    enum: ['user', 'admin', 'subscriber'],\\n    default: 'user'\\n  }\\n});\\n\\\
  nmodule.exports = mongoose.model('User', UserSchema);\\n\"\n}\n```"
