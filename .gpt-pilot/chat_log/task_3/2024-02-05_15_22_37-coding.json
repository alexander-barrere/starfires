{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "timeout": 30000,
          "success_message": "removed 1 package"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "auth.js",
          "path": "./config/auth.js",
          "content": "const { Strategy: JwtStrategy, ExtractJwt } = require('passport-jwt');\nconst User = require('../models/User');\nconst dotenv = require('dotenv');\ndotenv.config();\n\nconst options = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: process.env.JWT_SECRET // INPUT_REQUIRED {Provide your JWT secret key here}\n};\n\nconst jwtStrategy = new JwtStrategy(options, async (jwt_payload, done) => {\n  try {\n    const user = await User.findById(jwt_payload.user.id);\n    if (!user) return done(null, false);\n    return done(null, user);\n  } catch (error) {\n    return done(error, false);\n  }\n});\n\nmodule.exports = (passport) => {\n  passport.use(jwtStrategy);\n};\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "User.js",
          "path": "./models/User.js",
          "content": "const mongoose = require('mongoose');\n\nconst UserSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  created_at: {\n    type: Date,\n    default: Date.now\n  },\n  last_login: {\n    type: Date\n  }\n});\n\nmodule.exports = mongoose.model('User', UserSchema);\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "userController.js",
          "path": "./controllers/userController.js",
          "content": "const bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { validationResult } = require('express-validator');\nconst User = require('../models/User');\n\nexports.register = async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  \n  let { username, email, password } = req.body;\n  \n  try {\n    let user = await User.findOne({ email });\n    if (user) {\n      return res.status(400).json({ errors: [{ msg: 'User already exists' }] });\n    }\n\n    user = new User({\n      username,\n      email,\n      password\n    });\n\n    const salt = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(password, salt);\n\n    await user.save();\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n\n    jwt.sign(\n      payload,\n      process.env.JWT_SECRET,\n      { expiresIn: 3600 },\n      (err, token) => {\n        if(err) throw err;\n        res.json({ token });\n      }\n    );\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.login = async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  const { email, password } = req.body;\n\n  try {\n    let user = await User.findOne({ email });\n    if (!user) {\n      return res.status(400).json({ errors: [{ msg: 'Invalid Credentials' }] });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({ errors: [{ msg: 'Invalid Credentials' }] });\n    }\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n\n    jwt.sign(\n      payload,\n      process.env.JWT_SECRET,\n      { expiresIn: 3600 },\n      (err, token) => {\n        if(err) throw err;\n        res.json({ token });\n      }\n    );\n  } catch(err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": ".env",
          "path": "./.env",
          "content": "MONGO_URI=mongodb://localhost:27017/starfires_v2\nJWT_SECRET=your_jwt_secret_here // INPUT_REQUIRED {Provide your JWT secret key here}\n"
        }
      },
      {
        "type": "command",
        "command": {
          "timeout": 5000,
          "success_message": ""
        }
      }
    ]
  }
}