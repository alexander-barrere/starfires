{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "implement_development_plan",
      "description": "Implements the development plan.",
      "parameters": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "array",
            "description": "List of development tasks that need to be done to implement the entire plan.",
            "items": {
              "type": "object",
              "description": "Development task that needs to be done to implement the entire plan.",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Description of the development task that needs to be done to implement the entire plan."
                },
                "programmatic_goal": {
                  "type": "string",
                  "description": "Detailed description of programmatic goal. Programmatic goal that will determine if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before the task is sent to you for a review). All details previously specified by user that are important for this task must be included in this programmatic goal."
                },
                "user_review_goal": {
                  "type": "string",
                  "description": "User review goal that will determine if a task is done or not, but from a user perspective since it will be reviewed by a human."
                }
              },
              "required": [
                "description",
                "programmatic_goal",
                "user_review_goal"
              ]
            }
          }
        },
        "required": [
          "plan"
        ]
      }
    }
  ],
  "response": {
    "plan": [
      {
        "description": "Initialize the Node.js backend, setup Express server with basic routing, and install core dependencies.",
        "programmatic_goal": "Confirmation that server runs without errors on localhost and responds to a GET request at '/api/ping' endpoint with a status code 200 and a JSON { 'message': 'pong' }.",
        "user_review_goal": "Reviewer can send a GET request to '/api/ping' endpoint and receive the expected JSON response."
      },
      {
        "description": "Configure MongoDB database connection using Mongoose and create a User schema to handle user data.",
        "programmatic_goal": "Database connection established without errors, User schema includes fields for username, email, password, and timestamps. Mongoose can create and retrieve User documents.",
        "user_review_goal": "Developer can demonstrate the ability to perform CRUD operations on User documents in the MongoDB database through Mongoose."
      },
      {
        "description": "Implement authentication system using OAuth and JWT with routes for registration, login, and user session management.",
        "programmatic_goal": "Existence of endpoints for /auth/register and /auth/login that handle user authentication, issuing JWT upon successful login, and maintenance of user session.",
        "user_review_goal": "User can register an account and, upon registration, can log in and receive a token that grants access to authenticated routes."
      },
      {
        "description": "Build the React frontend setup along with the initial UI components using Bootstrap, HTML, and CSS3.",
        "programmatic_goal": "React project created with components for navigation bar, footer, and a home page with styling applied using Bootstrap.",
        "user_review_goal": "Reviewer can see a visually appealing home page with a navigation bar and footer upon running the React app."
      },
      {
        "description": "Integrate Socket.IO for real-time communication and setup mechanisms to handle live video streaming on the platform.",
        "programmatic_goal": "Socket.IO configured on both server and client-side, and a simple video streaming connection established between two users.",
        "user_review_goal": "Two users can open the site and witness real-time video streaming from one end to the other."
      },
      {
        "description": "Design and implement the digital storefront including the schema for store products and the shopping cart functionality.",
        "programmatic_goal": "Product schema with fields for name, description, price, and category is created. Basic CRUD operations on products and adding/removing items from a user's cart are implemented.",
        "user_review_goal": "Reviewer can add products to the cart, view them in the cart, and modify quantities."
      },
      {
        "description": "Create the blog infrastructure with single-admin CRUD operations and draft blogging interface.",
        "programmatic_goal": "Blog schema is created to handle blog posts with endpoints for creating, reading, updating, and deleting posts by an authenticated admin.",
        "user_review_goal": "The administrator can log in, create a new blog post, edit it, delete it, and list all posts with expected changes reflected."
      },
      {
        "description": "Develop mastery courses area with user progress tracking, assessments and Python backend computation for astrology charts.",
        "programmatic_goal": "Endpoints for course content delivery, user progress tracking, and assessments exist. Astrological calculations can be performed using Python scripts.",
        "user_review_goal": "A user can enroll in a course, proceed through the content, take an assessment, and view their progress."
      },
      {
        "description": "Implement natal chart calculations, transit forecasts, compatibility reports, and other astrological services.",
        "programmatic_goal": "Backend Python services correctly calculate natal charts, transits, and compatibility, and data gets delivered through RESTful endpoints.",
        "user_review_goal": "Reviewer can enter relevant data and receive detailed astrological reports personalized to the input."
      },
      {
        "description": "Setup D3.js integration for data visualization and implement dynamic charts representing astrological data.",
        "programmatic_goal": "D3.js is configured in the React project, and visual components are created to depict astrological data obtained from the back end.",
        "user_review_goal": "User can see their astrological data represented as interactive and visually pleasing D3.js charts on the frontend."
      },
      {
        "description": "Refine UI/UX and ensure responsive design, cross-browser compatibility, and implement graceful error handling.",
        "programmatic_goal": "All UI components are tested for responsiveness across different screen sizes. Cross-browser tests pass, and all main user flows handle errors gracefully with user feedback.",
        "user_review_goal": "Reviewer experiences a smooth, user-friendly interface without crashes, and consistent design across major browsers and devices."
      },
      {
        "description": "Create a cron job for routine database backup and maintenance.",
        "programmatic_goal": "Cron job implemented in Node.js using the cron library to schedule and perform regular database backups.",
        "user_review_goal": "Developer can demonstrate the cron job triggering at scheduled times and databases backups are created and stored correctly."
      },
      {
        "description": "Conduct final integration testing to ensure all components of the website operate cohesively.",
        "programmatic_goal": "Automated integration tests cover the main user flows through the system, checking that frontend calls correctly interact with the backend and produce desired outcomes.",
        "user_review_goal": "Reviewer can follow documented user journeys and confirm the entire system functions as one cohesive application."
      }
    ]
  }
}