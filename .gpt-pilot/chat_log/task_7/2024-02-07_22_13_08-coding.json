{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "User.js",
          "path": "./models/User.js",
          "content": "const mongoose = require('mongoose');\n\nconst UserSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  created_at: {\n    type: Date,\n    default: Date.now\n  },\n  last_login: {\n    type: Date\n  },\n  role: {\n    type: String,\n    enum: ['user', 'admin'],\n    default: 'user'\n  }\n});\n\nmodule.exports = mongoose.model('User', UserSchema);\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "adminAuth.js",
          "path": "./middleware/adminAuth.js",
          "content": "const passport = require('passport');\nconst User = require('../models/User');\n\nconst adminAuth = [passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n    try {\n        const adminEmail = process.env.ADMIN_EMAIL; // INPUT_REQUIRED Add admin email in environment variables\n        const user = await User.findById(req.user.id);\n        \n        if (user.email === adminEmail && user.role === 'admin') {\n            return next();\n        } else {\n            return res.status(403).json({ message: 'Access denied.' });\n        }\n    } catch (error) {\n        return res.status(500).json({ message: 'Server error', error });\n    }\n}];\n\nmodule.exports = adminAuth;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "blogRoutes.js",
          "path": "./routes/blogRoutes.js",
          "content": "const express = require('express');\nconst { check } = require('express-validator');\nconst postController = require('../controllers/postController');\nconst adminAuth = require('../middleware/adminAuth');\nconst router = express.Router();\n\nrouter.post('/', adminAuth, [\n  check('title', 'Title is required').not().isEmpty(),\n  check('content', 'Content is required').not().isEmpty()\n], postController.createPost);\n\nrouter.put('/:id', adminAuth, [\n  check('title', 'Title is required').not().isEmpty(),\n  check('content', 'Content is required').not().isEmpty()\n], postController.updatePost);\n\nrouter.delete('/:id', adminAuth, postController.deletePost);\n\n[OLD CODE] Other CRUD operations for blog posts\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "Update the .env file to include the admin email. Add the following line: `ADMIN_EMAIL=<Your Admin Email>` where `<Your Admin Email>` is the actual email address of the admin."
      }
    ]
  }
}