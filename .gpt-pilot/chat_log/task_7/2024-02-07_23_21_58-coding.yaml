endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are a full stack software developer who works in a software development agency. You write very modular and
    clean code. Your job is to implement tasks that your tech lead assigns you. Each task has a description of what needs
    to be implemented, a programmatic goal that will determine if a task can be marked as done and user-review goal that will
    determine if a task is done or not but from a user perspective since it will be reviewed by a human.
- role: user
  content: "Here is how the file `controllers/postController.js` looks like right now:\n```\nconst Post = require('../models/Post');\n\
    const { validationResult } = require('express-validator');\n\nexports.createPost = async (req, res) => {\n  const errors\
    \ = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n\
    \  }\n  \n  const { title, content } = req.body;\n  const author = req.user.id;\n\n  try {\n    const newPost = new Post({\
    \ title, content, author });\n    const post = await newPost.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n\
    \    res.status(500).send('Server error');\n  }\n};\n\nexports.getPosts = async (req, res) => {\n  try {\n    const posts\
    \ = await Post.find().sort({ publishedDate: -1 });\n    res.json(posts);\n  } catch (err) {\n    console.error(err.message);\n\
    \    res.status(500).send('Server error');\n  }\n};\n\nexports.getPostById = async (req, res) => {\n  try {\n    const\
    \ post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found'\
    \ });\n    }\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server\
    \ error');\n  }\n};\n\nexports.updatePost = async (req, res) => {\n  const { title, content } = req.body;\n\n  try {\n\
    \    let post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ msg: 'Post\
    \ not found' });\n    }\n\n    post.title = title;\n    post.content = content;\n    post.lastUpdated = Date.now();\n\n\
    \    await post.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server\
    \ error');\n  }\n};\n\nexports.deletePost = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\
    \    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n\n    await post.remove();\n\
    \    res.json({ msg: 'Post removed' });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server\
    \ error');\n  }\n};\n\n```\n\nAnd here is the new implementation for the same file:\n```\nconst Post = require('../models/Post');\n\
    const { validationResult } = require('express-validator');\nconst User = require('../models/User'); // [OLD CODE] Ensure\
    \ this was already imported\n\nexports.createPost = async (req, res) => {\n  const errors = validationResult(req);\n \
    \ if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  \n  const { title, content\
    \ } = req.body;\n  const author = req.user.id;\n\n  try {\n    const adminUser = await User.findById(author);\n\n    //\
    \ Check if the author is an admin\n    if (adminUser.role !== 'admin') {\n      return res.status(403).json({ msg: 'Unauthorized:\
    \ Only admin can post blogs.' });\n    }\n    \n    const newPost = new Post({ title, content, author });\n    const post\
    \ = await newPost.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server\
    \ error');\n  }\n};\n// [OLD CODE] Rest of the file content goes here replacing this comment\n```\n\nNow, implement the\
    \ new changes into the previously implemented file and return the entirely coded file. Do not add any lines of code that\
    \ are not in the previously coded file or the new implementation but only combine those two.\n\n**IMPORTANT**\nAll lines\
    \ of code in the new implementation should be present. From the old implementation, only take the ones that are replaced\
    \ with the comment `[OLD CODE]` in the new implementation\n\n**IMPORTANT**\nMake sure that you respond with all lines\
    \ of code that are replaced by these comments, including all control structures, error handling, and any other relevant\
    \ logic that was in the original code.\nUnder no circumstances should you ever leave any part of the code snippet unwritten.\
    \ Every single line of code that exists in the place where the comment lives right now should be replaced. Do not include\
    \ any code that is above or below the comment but only the code that should be in the position of the comment."
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"file_content\": {\n        \"type\": \"string\",\n     \
    \   \"description\": \"Fully coded file. This contains only the lines of code and no other text.\"\n    }\n}\n```\n\n"
response: "```json\n{\n    \"file_content\": \"const Post = require('../models/Post');\\nconst { validationResult } = require('express-validator');\\\
  nconst User = require('../models/User');\\n\\nexports.createPost = async (req, res) => {\\n  const errors = validationResult(req);\\\
  n  if (!errors.isEmpty()) {\\n    return res.status(400).json({ errors: errors.array() });\\n  }\\n  \\n  const { title,\
  \ content } = req.body;\\n  const author = req.user.id;\\n\\n  try {\\n    const adminUser = await User.findById(author);\\\
  n\\n    if (adminUser.role !== 'admin') {\\n      return res.status(403).json({ msg: 'Unauthorized: Only admin can post\
  \ blogs.' });\\n    }\\n    \\n    const newPost = new Post({ title, content, author });\\n    const post = await newPost.save();\\\
  n    res.json(post);\\n  } catch (err) {\\n    console.error(err.message);\\n    res.status(500).send('Server error');\\\
  n  }\\n};\\n\\nexports.getPosts = async (req, res) => {\\n  try {\\n    const posts = await Post.find().sort({ publishedDate:\
  \ -1 });\\n    res.json(posts);\\n  } catch (err) {\\n    console.error(err.message);\\n    res.status(500).send('Server\
  \ error');\\n  }\\n};\\n\\nexports.getPostById = async (req, res) => {\\n  try {\\n    const post = await Post.findById(req.params.id);\\\
  n    if (!post) {\\n      return res.status(404).json({ msg: 'Post not found' });\\n    }\\n    res.json(post);\\n  } catch\
  \ (err) {\\n    console.error(err.message);\\n    res.status(500).send('Server error');\\n  }\\n};\\n\\nexports.updatePost\
  \ = async (req, res) => {\\n  const { title, content } = req.body;\\n\\n  try {\\n    let post = await Post.findById(req.params.id);\\\
  n    if (!post) {\\n      return res.status(404).json({ msg: 'Post not found' });\\n    }\\n\\n    post.title = title;\\\
  n    post.content = content;\\n    post.lastUpdated = Date.now();\\n\\n    await post.save();\\n    res.json(post);\\n \
  \ } catch (err) {\\n    console.error(err.message);\\n    res.status(500).send('Server error');\\n  }\\n};\\n\\nexports.deletePost\
  \ = async (req, res) => {\\n  try {\\n    const post = await Post.findById(req.params.id);\\n    if (!post) {\\n      return\
  \ res.status(404).json({ msg: 'Post not found' });\\n    }\\n\\n    await post.remove();\\n    res.json({ msg: 'Post removed'\
  \ });\\n  } catch (err) {\\n    console.error(err.message);\\n    res.status(500).send('Server error');\\n  }\\n};\\n\"\n\
  }\n```"
