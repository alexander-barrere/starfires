{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "updateUserRole.js",
          "path": "/middleware/updateUserRole.js",
          "content": "const User = require('../models/User');\n\nconst updateUserRole = async (req, res, next) => {\n  try {\n    const user = await User.findById(req.user.id);\n    if (user && !user.isSubscriber) {\n      user.role = 'subscriber';\n      user.isSubscriber = true; // [OLD CODE] Add isSubscriber field to User model if not present\n      await user.save();\n    }\n    next();\n  } catch (error) {\n    console.error('Error updating user role:', error);\n    res.status(500).send('Server error');\n  }\n};\n\nmodule.exports = updateUserRole;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "subscriptionController.js",
          "path": "/controllers/subscriptionController.js",
          "content": "const User = require('../models/User');\nconst updateUserRole = require('../middleware/updateUserRole');\n\nexports.handleSubscription = async (req, res) => {\n  // INPUT_REQUIRED: Implement the actual subscription/payment logic here.\n  \n  // For simplicity assume that the subscription/payment was successful.\n  await updateUserRole(req, res, () => {});\n\n  // Return a success response\n  res.status(200).json({ message: 'Subscription successful, user role updated to subscriber.' });\n};\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "subscriptionRoutes.js",
          "path": "/routes/subscriptionRoutes.js",
          "content": "const express = require('express');\nconst { handleSubscription } = require('../controllers/subscriptionController');\nconst passport = require('passport');\n\nconst router = express.Router();\n\nrouter.post('/subscribe', passport.authenticate('jwt', { session: false }), handleSubscription);\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "server.js",
          "path": "/server.js",
          "content": "const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst connectDB = require('./config/db');\nconst passport = require('passport');\nconst cors = require('cors');\n\n// Connect Database\nconnectDB();\n\nconst app = express();\napp.use(cors({ origin: 'http://localhost:3000', credentials: true })); // Enable CORS for routes\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n    cors: {\n        origin: 'http://localhost:3000',\n        credentials: true,\n        methods: ['GET', 'POST']\n    }\n});\n\n// Middleware\napp.use(express.json());\nrequire('./config/auth')(passport);\napp.use(passport.initialize());\n// [OLD CODE] All existing server configuration and route setups\nconst subscriptionRoutes = require('./routes/subscriptionRoutes');\napp.use('/api/subscribe', subscriptionRoutes);\n\nconst PORT = process.env.PORT || 3001;\n\napp.get('/api/ping', (req, res) => {\n    res.json({ message: 'pong' });\n});\n\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});\n"
        }
      }
    ]
  }
}