{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "Post.js",
          "path": "/models/Post.js",
          "content": "const mongoose = require('mongoose');\n\nconst PostSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true\n  },\n  content: {\n    type: String,\n    required: true\n  },\n  author: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  publishedDate: {\n    type: Date,\n    default: Date.now\n  },\n  lastUpdated: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmodule.exports = mongoose.model('Post', PostSchema);\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "postController.js",
          "path": "/controllers/postController.js",
          "content": "const Post = require('../models/Post');\nconst { validationResult } = require('express-validator');\n\nexports.createPost = async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  \n  const { title, content } = req.body;\n  const author = req.user.id;\n\n  try {\n    const newPost = new Post({ title, content, author });\n    const post = await newPost.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.getPosts = async (req, res) => {\n  try {\n    const posts = await Post.find().sort({ publishedDate: -1 });\n    res.json(posts);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.getPostById = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.updatePost = async (req, res) => {\n  const { title, content } = req.body;\n\n  try {\n    let post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n\n    post.title = title;\n    post.content = content;\n    post.lastUpdated = Date.now();\n\n    await post.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.deletePost = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n\n    await post.remove();\n    res.json({ msg: 'Post removed' });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "blogRoutes.js",
          "path": "/routes/blogRoutes.js",
          "content": "const express = require('express');\nconst { check } = require('express-validator');\nconst postController = require('../controllers/postController');\nconst passport = require('passport');\nconst router = express.Router();\n\nconst requireAuth = passport.authenticate('jwt', { session: false });\n\nrouter.post('/', [\n  requireAuth,\n  check('title', 'Title is required').not().isEmpty(),\n  check('content', 'Content is required').not().isEmpty()\n], postController.createPost);\n\nrouter.get('/', postController.getPosts);\n\nrouter.get('/:id', postController.getPostById);\n\nrouter.put('/:id', [\n  requireAuth,\n  check('title', 'Title is required').not().isEmpty(),\n  check('content', 'Content is required').not().isEmpty()\n], postController.updatePost);\n\nrouter.delete('/:id', requireAuth, postController.deletePost);\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "server.js",
          "path": "/server.js",
          "content": "const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst connectDB = require('./config/db');\nconst User = require('./models/User');\nconst passport = require('passport');\nconst cors = require('cors');\n\nconnectDB();\n\nconst app = express();\napp.use(cors({ origin: '*' }));\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n    cors: {\n        origin: '*',\n        methods: ['GET', 'POST']\n    }\n});\n\napp.use(express.json());\nrequire('./config/auth')(passport);\napp.use(passport.initialize());\n\n[OLD CODE] Previous route imports.\nconst blogRoutes = require('./routes/blogRoutes');\napp.use('/api/posts', blogRoutes);\n\n[OLD CODE] Previous app setup like routes, socket setup and server start.\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "BlogList.js",
          "path": "starfires_v2_frontend/src/components/BlogList.js",
          "content": "import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst BlogList = () => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const result = await axios.get('http://localhost:3001/api/posts');\n      setPosts(result.data);\n    };\n    fetchPosts();\n  }, []);\n\n  return (\n    <div>\n      <h2>Blog Posts</h2>\n      <ul>\n        {posts.map(post => (\n          <li key={post._id}>{post.title}</li> // INPUT_REQUIRED Add edit and delete buttons with corresponding functionality\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default BlogList;\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "BlogPage.js",
          "path": "starfires_v2_frontend/src/pages/BlogPage.js",
          "content": "import React from 'react';\nimport BlogList from '../components/BlogList';\n\nconst BlogPage = () => {\n  return (\n    <>\n      <h1>Blog</h1>\n      <BlogList />\n      // INPUT_REQUIRED Add other components for creating and editing blog posts\n    </>\n  );\n};\n\nexport default BlogPage;\n"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm install",
          "timeout": 300000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "cd starfires_v2_frontend && npm install",
          "timeout": 300000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm start",
          "timeout": 15000,
          "success_message": "Server running on port",
          "command_id": "backend_server"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "cd starfires_v2_frontend && npm start",
          "timeout": 30000,
          "success_message": "You can now view starfires_v2_frontend in the browser.",
          "command_id": "frontend_server"
        }
      }
    ]
  }
}