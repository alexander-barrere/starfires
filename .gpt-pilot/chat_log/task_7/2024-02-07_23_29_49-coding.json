{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "get_fully_coded_file",
      "description": "Gets the fully coded file.",
      "parameters": {
        "type": "object",
        "properties": {
          "file_content": {
            "type": "string",
            "description": "Fully coded file. This contains only the lines of code and no other text."
          }
        },
        "required": [
          "file_content"
        ]
      }
    }
  ],
  "response": {
    "file_content": "const Post = require('../models/Post');\nconst { validationResult } = require('express-validator');\nconst User = require('../models/User');\n\nexports.createPost = async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  \n  const { title, content } = req.body;\n  const author = req.user.id;\n\n  try {\n    const adminUser = await User.findById(author);\n\n    if (adminUser.role !== 'admin') {\n      return res.status(403).json({ msg: 'Unauthorized: Only admin can post blogs.' });\n    }\n    \n    const newPost = new Post({ title, content, author });\n    const post = await newPost.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.getPosts = async (req, res) => {\n  try {\n    const posts = await Post.find().sort({ publishedDate: -1 });\n    res.json(posts);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.getPostById = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.updatePost = async (req, res) => {\n  const { title, content } = req.body;\n\n  try {\n    let post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n\n    post.title = title;\n    post.content = content;\n    post.lastUpdated = Date.now();\n\n    await post.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n\nexports.deletePost = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n\n    const postTitle = post.title; // Saving the title before deletion for the response\n    await Post.deleteOne({ _id: req.params.id });\n    res.json({ msg: 'Post removed', title: postTitle }); // Including the title in the response\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n"
  }
}