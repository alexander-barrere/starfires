{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "command": "npx create-react-app starfires_v2_frontend",
          "timeout": 300000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "cd starfires_v2_frontend && npm install bootstrap react-bootstrap axios",
          "timeout": 120000
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "index.js",
          "path": "/starfires_v2_frontend/src/index.js",
          "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "App.js",
          "path": "/starfires_v2_frontend/src/App.js",
          "content": "import React from 'react';\nimport NavigationBar from './components/NavigationBar';\nimport Footer from './components/Footer';\nimport Home from './pages/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavigationBar />\n      <Home />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "NavigationBar.js",
          "path": "/starfires_v2_frontend/src/components/NavigationBar.js",
          "content": "import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst NavigationBar = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n      <Navbar.Brand href=\"#home\">Starfires V2</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"ml-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#link\">Features</Nav.Link>\n          {/* INPUT_REQUIRED {Add other navigation links as needed} */}\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavigationBar;"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "Footer.js",
          "path": "/starfires_v2_frontend/src/components/Footer.js",
          "content": "import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer bg-dark text-light\">\n      <Container>\n        <span>&copy; {new Date().getFullYear()} Starfires V2</span>\n      </Container>\n    </footer>\n  );\n};\n\nexport default Footer;"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "Home.js",
          "path": "/starfires_v2_frontend/src/pages/Home.js",
          "content": "import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nconst Home = () => {\n  return (\n    <Container>\n      <h1>Welcome to Starfires V2</h1>\n      {/* INPUT_REQUIRED {Add more home page content here} */}\n    </Container>\n  );\n};\n\nexport default Home;"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "App.css",
          "path": "/starfires_v2_frontend/src/App.css",
          "content": "/* INPUT_REQUIRED {Add your custom styles here, leaving it empty is also acceptable for now} */"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "index.css",
          "path": "/starfires_v2_frontend/src/index.css",
          "content": "body, html {\n  height: 100%;\n}\n\n.footer {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  text-align: center;\n}"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "cd starfires_v2_frontend && npm start",
          "timeout": 30000,
          "success_message": "You can now view starfires_v2_frontend in the browser.",
          "command_id": "start_react_app"
        }
      }
    ]
  }
}