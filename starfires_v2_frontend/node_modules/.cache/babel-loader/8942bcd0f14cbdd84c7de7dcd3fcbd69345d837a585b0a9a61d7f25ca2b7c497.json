{"ast":null,"code":"var _jsxFileName = \"/Users/dn5v/.bin/git/github/gpt-pilot/workspace/starfires_v2/starfires_v2_frontend/src/pages/Stargate.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport { socket } from '../utils/socket'; // Make sure this path is correct for your socket utility\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stargate = () => {\n  _s();\n  const videoRef = useRef(null);\n  useEffect(() => {\n    const getMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        // Assuming you have a room logic or a way to identify the live stream\n        const roomName = 'stargate-room'; // This should be dynamic based on your app's logic\n        socket.emit('join-stream', roomName);\n\n        // Add here the WebRTC signaling logic: sending offers, creating answers, and handling ICE candidates\n        // Example signaling events: socket.on('offer', handleOffer); socket.on('answer', handleAnswer);\n        // Remember to clean up these event listeners and the media stream on component unmount\n      } catch (error) {\n        console.error('Error accessing media devices:', error);\n      }\n    };\n    getMedia();\n    return () => {\n      if (videoRef.current && videoRef.current.srcObject) {\n        const tracks = videoRef.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n        videoRef.current.srcObject = null;\n      }\n      // Leave the room on component unmount\n      socket.emit('leave-stream', roomName);\n      // Also, don't forget to remove socket event listeners to prevent memory leaks\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-md-center mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Stargate: Live Astrology Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Connect with astrologers and enthusiasts in real-time discussions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-stream\",\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          children: \"Join Live Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Stargate, \"PdMsmLAy5JKU3vCrhAlqGYQfKuA=\");\n_c = Stargate;\nexport default Stargate;\nvar _c;\n$RefreshReg$(_c, \"Stargate\");","map":{"version":3,"names":["React","useEffect","useRef","Container","Row","Col","Button","socket","jsxDEV","_jsxDEV","Stargate","_s","videoRef","getMedia","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","roomName","emit","error","console","tracks","getTracks","forEach","track","stop","children","className","md","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","muted","style","width","variant","_c","$RefreshReg$"],"sources":["/Users/dn5v/.bin/git/github/gpt-pilot/workspace/starfires_v2/starfires_v2_frontend/src/pages/Stargate.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport { socket } from '../utils/socket'; // Make sure this path is correct for your socket utility\n\nconst Stargate = () => {\n    const videoRef = useRef(null);\n\n    useEffect(() => {\n        const getMedia = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n                if (videoRef.current) {\n                    videoRef.current.srcObject = stream;\n                }\n                // Assuming you have a room logic or a way to identify the live stream\n                const roomName = 'stargate-room'; // This should be dynamic based on your app's logic\n                socket.emit('join-stream', roomName);\n\n                // Add here the WebRTC signaling logic: sending offers, creating answers, and handling ICE candidates\n                // Example signaling events: socket.on('offer', handleOffer); socket.on('answer', handleAnswer);\n                // Remember to clean up these event listeners and the media stream on component unmount\n\n            } catch (error) {\n                console.error('Error accessing media devices:', error);\n            }\n        };\n\n        getMedia();\n\n        return () => {\n            if (videoRef.current && videoRef.current.srcObject) {\n                const tracks = videoRef.current.srcObject.getTracks();\n                tracks.forEach(track => track.stop());\n                videoRef.current.srcObject = null;\n            }\n            // Leave the room on component unmount\n            socket.emit('leave-stream', roomName);\n            // Also, don't forget to remove socket event listeners to prevent memory leaks\n        };\n    }, []);\n\n    return (\n        <Container>\n            <Row className=\"justify-content-md-center mt-5\">\n                <Col md={8}>\n                    <h1>Stargate: Live Astrology Chat</h1>\n                    <p>Connect with astrologers and enthusiasts in real-time discussions.</p>\n                    <div className=\"live-stream\">\n                        <video ref={videoRef} autoPlay playsInline muted style={{ width: '100%' }}></video>\n                    </div>\n                    {/* Additional UI controls for the live stream could go here */}\n                    <Button variant=\"primary\">Join Live Chat</Button>\n                </Col>\n            </Row>\n            {/* Additional content and components specific to Stargate */}\n        </Container>\n    );\n};\n\nexport default Stargate;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,iBAAiB;AAC7D,SAASC,MAAM,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACZ,MAAMY,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAI;QACA,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE,IAAI;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QACtF,IAAIP,QAAQ,CAACQ,OAAO,EAAE;UAClBR,QAAQ,CAACQ,OAAO,CAACC,SAAS,GAAGP,MAAM;QACvC;QACA;QACA,MAAMQ,QAAQ,GAAG,eAAe,CAAC,CAAC;QAClCf,MAAM,CAACgB,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;;QAEpC;QACA;QACA;MAEJ,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAC1D;IACJ,CAAC;IAEDX,QAAQ,CAAC,CAAC;IAEV,OAAO,MAAM;MACT,IAAID,QAAQ,CAACQ,OAAO,IAAIR,QAAQ,CAACQ,OAAO,CAACC,SAAS,EAAE;QAChD,MAAMK,MAAM,GAAGd,QAAQ,CAACQ,OAAO,CAACC,SAAS,CAACM,SAAS,CAAC,CAAC;QACrDD,MAAM,CAACE,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;QACrClB,QAAQ,CAACQ,OAAO,CAACC,SAAS,GAAG,IAAI;MACrC;MACA;MACAd,MAAM,CAACgB,IAAI,CAAC,cAAc,EAAED,QAAQ,CAAC;MACrC;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIb,OAAA,CAACN,SAAS;IAAA4B,QAAA,eACNtB,OAAA,CAACL,GAAG;MAAC4B,SAAS,EAAC,gCAAgC;MAAAD,QAAA,eAC3CtB,OAAA,CAACJ,GAAG;QAAC4B,EAAE,EAAE,CAAE;QAAAF,QAAA,gBACPtB,OAAA;UAAAsB,QAAA,EAAI;QAA6B;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtC5B,OAAA;UAAAsB,QAAA,EAAG;QAAkE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACzE5B,OAAA;UAAKuB,SAAS,EAAC,aAAa;UAAAD,QAAA,eACxBtB,OAAA;YAAO6B,GAAG,EAAE1B,QAAS;YAAC2B,QAAQ;YAACC,WAAW;YAACC,KAAK;YAACC,KAAK,EAAE;cAAEC,KAAK,EAAE;YAAO;UAAE;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClF,CAAC,eAEN5B,OAAA,CAACH,MAAM;UAACsC,OAAO,EAAC,SAAS;UAAAb,QAAA,EAAC;QAAc;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEpB,CAAC;AAAC1B,EAAA,CArDID,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AAuDd,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}