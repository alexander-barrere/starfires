{"ast":null,"code":"var _jsxFileName = \"/Users/dn5v/.bin/git/github/gpt-pilot/workspace/starfires_v2/starfires_v2_frontend/src/pages/Stargate.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport { socket } from '../utils/socket'; // Ensure the import path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stargate = () => {\n  _s();\n  const videoRef = useRef(null);\n  useEffect(() => {\n    // Define roomName inside useEffect to ensure it's captured in the cleanup function's closure\n    const roomName = 'stargate-room'; // Make this dynamic as needed\n\n    const getMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        socket.emit('join-stream', roomName);\n\n        // Setup WebRTC signaling logic here\n      } catch (error) {\n        console.error('Error accessing media devices:', error);\n      }\n    };\n    getMedia();\n\n    // Capture the current value of videoRef.current for use in the cleanup function\n    const currentVideoRef = videoRef.current;\n    return () => {\n      if (currentVideoRef && currentVideoRef.srcObject) {\n        const tracks = currentVideoRef.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n        currentVideoRef.srcObject = null;\n      }\n      socket.emit('leave-stream', roomName); // Use captured roomName\n      // Remove socket event listeners here to prevent memory leaks\n    };\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-md-center mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Stargate: Live Astrology Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Connect with astrologers and enthusiasts in real-time discussions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-stream\",\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          children: \"Join Live Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Stargate, \"PdMsmLAy5JKU3vCrhAlqGYQfKuA=\");\n_c = Stargate;\nexport default Stargate;\nvar _c;\n$RefreshReg$(_c, \"Stargate\");","map":{"version":3,"names":["React","useEffect","useRef","Container","Row","Col","Button","socket","jsxDEV","_jsxDEV","Stargate","_s","videoRef","roomName","getMedia","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","emit","error","console","currentVideoRef","tracks","getTracks","forEach","track","stop","children","className","md","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","muted","style","width","variant","_c","$RefreshReg$"],"sources":["/Users/dn5v/.bin/git/github/gpt-pilot/workspace/starfires_v2/starfires_v2_frontend/src/pages/Stargate.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport { socket } from '../utils/socket'; // Ensure the import path is correct\n\nconst Stargate = () => {\n    const videoRef = useRef(null);\n\n    useEffect(() => {\n        // Define roomName inside useEffect to ensure it's captured in the cleanup function's closure\n        const roomName = 'stargate-room'; // Make this dynamic as needed\n\n        const getMedia = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n                if (videoRef.current) {\n                    videoRef.current.srcObject = stream;\n                }\n                socket.emit('join-stream', roomName);\n\n                // Setup WebRTC signaling logic here\n            } catch (error) {\n                console.error('Error accessing media devices:', error);\n            }\n        };\n\n        getMedia();\n\n        // Capture the current value of videoRef.current for use in the cleanup function\n        const currentVideoRef = videoRef.current;\n\n        return () => {\n            if (currentVideoRef && currentVideoRef.srcObject) {\n                const tracks = currentVideoRef.srcObject.getTracks();\n                tracks.forEach(track => track.stop());\n                currentVideoRef.srcObject = null;\n            }\n            socket.emit('leave-stream', roomName); // Use captured roomName\n            // Remove socket event listeners here to prevent memory leaks\n        };\n    }, []); // Empty dependency array means this effect runs once on mount\n\n    return (\n        <Container>\n            <Row className=\"justify-content-md-center mt-5\">\n                <Col md={8}>\n                    <h1>Stargate: Live Astrology Chat</h1>\n                    <p>Connect with astrologers and enthusiasts in real-time discussions.</p>\n                    <div className=\"live-stream\">\n                        <video ref={videoRef} autoPlay playsInline muted style={{ width: '100%' }}></video>\n                    </div>\n                    <Button variant=\"primary\">Join Live Chat</Button>\n                </Col>\n            </Row>\n            {/* Additional content and components specific to Stargate */}\n        </Container>\n    );\n};\n\nexport default Stargate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}